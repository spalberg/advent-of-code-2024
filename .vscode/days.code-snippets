{
	"implementation for daily challenge": {
		"scope": "typescript",
		"prefix": "impl",
        "body": [
            "import { loadInput } from \"utils\";",
            "",
            "export function part1(input: Array<string>) {",
            "  return 0;",
            "}",
            "",
            "export function part2(input: Array<string>) {",
            "  return 0;",
            "}",
            "",
            "if (import.meta.main) {",
            "  console.log(part1(await loadInput($1)));",
            "  console.log(part2(await loadInput($1)));",
            "}"
        ],
		"description": "implementation for daily challenge"
	},
    "test for daily challenge": {
		"scope": "typescript",
		"prefix": "test",
        "body": [
            "import { expect } from \"@std/expect\";",
            "import { describe, it } from \"@std/testing/bdd\";",
            "import { part1, part2 } from \"./main.ts\";",
            "import { loadInput } from \"utils\";",
            "",
            "describe(\"day $1 example\", () => {",
            "  it(\"part 1\", () => {",
            "    expect(part1([])).toBe(-1);",
            "  });",
            "",
            "  it.ignore(\"part 2\", () => {",
            "    expect(part2([])).toBe(-1);",
            "  });",
            "});",
            "",
            "describe.ignore(\"day $1 solution\", () => {",
            "  it(\"part 1\", async () => {",
            "    expect(part1(await loadInput($1))).toBe(-1);",
            "  });",
            "",
            "  it(\"part 2\", async () => {",
            "    expect(part2(await loadInput($1))).toBe(-1);",
            "  });",
            "});",
            ""
        ],
		"description": "test for daily challenge"
	}
}